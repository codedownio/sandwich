"use strict";(self.webpackChunksandwich_site=self.webpackChunksandwich_site||[]).push([[639],{2853:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var s=t(6070),i=t(6113);const o={id:"sandwich-contexts",title:"Base contexts"},a=void 0,c={id:"context-libraries/sandwich-contexts",title:"Base contexts",description:"The sandwich-contexts package provides several useful contexts for adding power to your tests.",source:"@site/docs/context-libraries/sandwich-contexts.md",sourceDirName:"context-libraries",slug:"/context-libraries/sandwich-contexts",permalink:"/sandwich/docs/context-libraries/sandwich-contexts",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/context-libraries/sandwich-contexts.md",tags:[],version:"current",frontMatter:{id:"sandwich-contexts",title:"Base contexts"},sidebar:"docs",previous:{title:"Selenium",permalink:"/sandwich/docs/extensions/sandwich-webdriver"},next:{title:"Docker",permalink:"/sandwich/docs/context-libraries/sandwich-contexts-docker"}},r={},l=[{value:"Nix contexts",id:"nix-contexts",level:2},{value:"File contexts",id:"file-contexts",level:2},{value:"File + Nix contexts = \u2764\ufe0f",id:"file--nix-contexts--\ufe0f",level:2},{value:"PostgreSQL contexts",id:"postgresql-contexts",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://hackage.haskell.org/package/sandwich-contexts",children:"sandwich-contexts"})," package provides several useful contexts for adding power to your tests."]}),"\n",(0,s.jsx)(n.p,{children:"This package is mainly concerned with introducing external files and binaries that your tests might need. It also contains some miscellaneous other contexts that don't require any special dependencies."}),"\n",(0,s.jsxs)(n.p,{children:["Other context packages have been split out to address specific needs, such as ",(0,s.jsx)(n.a,{href:"./sandwich-contexts-docker",children:"sandwich-contexts-docker"}),", ",(0,s.jsx)(n.a,{href:"./sandwich-contexts-kubernetes",children:"sandwich-contexts-kubernetes"}),", and , ",(0,s.jsx)(n.a,{href:"./sandwich-contexts-minio",children:"sandwich-contexts-minio"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"nix-contexts",children:"Nix contexts"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://hackage.haskell.org/package/sandwich-contexts/docs/Test-Sandwich-Contexts-Nix.html",children:"Test.Sandwich.Contexts.Nix"})," module allows you to introduce a ",(0,s.jsx)(n.a,{href:"https://hackage.haskell.org/package/sandwich-contexts/docs/Test-Sandwich-Contexts-Nix.html#t:NixContext",children:"NixContext"}),", which represents a snapshot of the ",(0,s.jsx)(n.a,{href:"https://github.com/NixOS/nixpkgs",children:"Nixpkgs"})," package collection."]}),"\n",(0,s.jsxs)(n.p,{children:["You can introduce any version of Nixpkgs that you ",(0,s.jsx)(n.a,{href:"https://hackage.haskell.org/package/sandwich-contexts/docs/Test-Sandwich-Contexts-Nix.html#t:NixpkgsDerivation",children:"want"}),". Several are provided in the library, such as ",(0,s.jsx)(n.a,{href:"https://hackage.haskell.org/package/sandwich-contexts/docs/Test-Sandwich-Contexts-Nix.html#v:nixpkgsRelease2405",children:"nixpkgsRelease2405"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Once you introduce a ",(0,s.jsx)(n.code,{children:"NixContext"}),", you can use it to build Nix artifacts. For example, the ",(0,s.jsx)(n.a,{href:"https://hackage.haskell.org/package/sandwich-contexts-0.3.0.1/docs/Test-Sandwich-Contexts-Nix.html#v:introduceNixEnvironment",children:"introduceNixEnvironment"})," function will allow you to build an environment with a given list of packages."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-haskell",metastring:'title="https://github.com/codedownio/sandwich/blob/master/demos/demo-nix/app/Main.hs"',children:'nixDemo :: TopSpec\nnixDemo =\n  introduceNixContext nixpkgsRelease2405 $\n    introduceNixEnvironment ["emacs", "firefox"] $ do\n      it "Uses the Nix environment" $ do\n        env <- getContext nixEnvironment\n        binaries <- listDirectory (env </> "bin")\n        info [i|Found binaries in environment: #{binaries}|]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This test will log the various binaries that are available, such as ",(0,s.jsx)(n.code,{children:"emacs"}),", ",(0,s.jsx)(n.code,{children:"emacsclient"}),", and ",(0,s.jsx)(n.code,{children:"firefox"}),". You can now use these artifacts in tests."]}),"\n",(0,s.jsx)(n.h2,{id:"file-contexts",children:"File contexts"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://hackage.haskell.org/package/sandwich-contexts/docs/Test-Sandwich-Contexts-Files.html",children:"Test.Sandwich.Contexts.Files"})," module allows you to introduce named files as contexts. For example, suppose your tests need access to ",(0,s.jsx)(n.code,{children:"grep"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-haskell",children:'tests :: TopSpec\ntests =\n  introduceFile @"grep" "/path/to/grep" $ do\n    it "uses grep for something" $ do\n      grep <- askFile @"grep"\n      results <- readCreateProcess (proc grep ["foo"]) ""\n      ...\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Notice the syntax here with the ",(0,s.jsx)(n.code,{children:'@"grep"'}),". This is using a combination of type-level strings and ",(0,s.jsx)(n.code,{children:"-XTypeApplications"})," to produce some nice readable syntax."]}),"\n",(0,s.jsxs)(n.p,{children:["However, hardcoding a path to a file is not very robust. We also have several function for introducing files from the environment. For example, ",(0,s.jsx)(n.a,{href:"https://hackage.haskell.org/package/sandwich-contexts/docs/Test-Sandwich-Contexts-Files.html#v:introduceBinaryViaEnvironment",children:"introduceBinaryViaEnvironment"})," will search the PATH for a given binary. This node will fail if the binary is not found, making the failure easy to locate (compared to a more inscrutable error deep in your tests)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-haskell",children:'tests :: TopSpec\ntests =\n  introduceBinaryViaEnvironment @"grep" $ do\n    it "uses grep for something" $ do\n      grep <- askFile @"grep"\n      ...\n'})}),"\n",(0,s.jsxs)(n.p,{children:['It\'s usually a good idea to decouple the "introduce" node from what the tests need. For this reason we provide the ',(0,s.jsx)(n.a,{href:"https://hackage.haskell.org/package/sandwich-contexts/docs/Test-Sandwich-Contexts-Files.html#t:HasFile",children:"HasFile"})," alias, which you can use like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-haskell",metastring:'title="https://github.com/codedownio/sandwich/blob/master/demos/demo-files/app/Main.hs"',children:'filesDemo :: TopSpec\nfilesDemo =\n  introduceBinaryViaEnvironment @"grep" $ do\n    testsWithGrep\n\ntestsWithGrep :: (HasFile context "grep") => SpecFree context IO ()\ntestsWithGrep = do\n  it "Uses grep binary" $ do\n    grep <- askFile @"grep"\n    output <- readCreateProcess (proc grep ["--version"]) ""\n    info [i|grep --version output: #{output}|]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Now we can wrap ",(0,s.jsx)(n.code,{children:"testsWithGrep"}),' in any "introduce" node that provides the file! Including more fancy ones, like the Nix-based ones below.']}),"\n",(0,s.jsx)(n.h2,{id:"file--nix-contexts--\ufe0f",children:"File + Nix contexts = \u2764\ufe0f"}),"\n",(0,s.jsxs)(n.p,{children:["Where Nix context and file contexts really shine is when you use them together. For example, the ",(0,s.jsx)(n.a,{href:"https://hackage.haskell.org/package/sandwich-contexts/docs/Test-Sandwich-Contexts-Files.html#v:introduceBinaryViaNixPackage",children:"introduceBinaryViaNixPackage"})," function depends on a ",(0,s.jsx)(n.a,{href:"https://hackage.haskell.org/package/sandwich-contexts/docs/Test-Sandwich-Contexts-Nix.html#t:NixContext",children:"NixContext"})," being available, and uses it to introduce a given binary from a given package."]}),"\n",(0,s.jsxs)(n.p,{children:["You can see that put together here, where we introduce the ",(0,s.jsx)(n.code,{children:"hello"})," binary from the ",(0,s.jsx)(n.code,{children:"hello"})," package."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-haskell",metastring:'title="https://github.com/codedownio/sandwich/blob/master/demos/demo-nix-binary/app/Main.hs"',children:'spec :: TopSpec\nspec = describe "Introducing a Nix binary" $\n  introduceNixContext nixpkgsReleaseDefault $\n    introduceBinaryViaNixPackage @"hello" "hello" $ do\n      it "uses the hello binary" $ do\n        useHello\n\nuseHello :: (MonadIO m, MonadReader context m, HasFile context "hello") => m ()\nuseHello = do\n  helloPath <- askFile @"hello"\n  readCreateProcess (proc helloPath []) "" >>= (`shouldBe` "Hello, world!\\n")\n'})}),"\n",(0,s.jsx)(n.p,{children:"This brings together a robust solution for using external binaries:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"It is fully reproducible, as it uses a pinned Nixpkgs checkout."}),"\n",(0,s.jsxs)(n.li,{children:["The test function ",(0,s.jsx)(n.code,{children:"useHello"})," is decoupled from the introduction method, via the ",(0,s.jsx)(n.code,{children:'HasFile context "hello"'})," constraint."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["By the way, you can browse all the available Nix packages at ",(0,s.jsx)(n.a,{href:"https://search.nixos.org/packages",children:"search.nixos.org"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"postgresql-contexts",children:"PostgreSQL contexts"})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},6113:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var s=t(758);const i={},o=s.createContext(i);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);