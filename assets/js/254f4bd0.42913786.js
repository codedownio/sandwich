"use strict";(self.webpackChunksandwich_site=self.webpackChunksandwich_site||[]).push([[3680],{2053:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var o=n(6070),i=n(6113),s=n(4125);const r={id:"tui",title:"Terminal UI Formatter"},a=void 0,l={id:"formatters/tui",title:"Terminal UI Formatter",description:"The terminal UI formatter is one of the key features of Sandwich. It uses the awesome Brick library to make an interactive UI for running (or re-running! ) tests and inspecting their results.",source:"@site/docs/formatters/tui.md",sourceDirName:"formatters",slug:"/formatters/tui",permalink:"/sandwich/docs/formatters/tui",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/formatters/tui.md",tags:[],version:"current",frontMatter:{id:"tui",title:"Terminal UI Formatter"},sidebar:"docs",previous:{title:"Test Discovery",permalink:"/sandwich/docs/discovery"},next:{title:"Print Formatter",permalink:"/sandwich/docs/formatters/print"}},c={},d=[{value:"Usage",id:"usage",level:2},{value:"About the UI",id:"about-the-ui",level:2},{value:"Opening nodes in your file explorer",id:"opening-nodes-in-your-file-explorer",level:2},{value:"Jumping to tests, logs, and failures in your editor",id:"jumping-to-tests-logs-and-failures-in-your-editor",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Custom exception formatters",id:"custom-exception-formatters",level:2}];function h(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["The terminal UI formatter is one of the key features of Sandwich. It uses the awesome ",(0,o.jsx)(t.a,{href:"https://hackage.haskell.org/package/brick",children:"Brick"})," library to make an interactive UI for running (or re-running! ) tests and inspecting their results."]}),"\n",(0,o.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsxs)(t.p,{children:["If you're using ",(0,o.jsx)(t.a,{href:"http://hackage.haskell.org/package/sandwich/docs/Test-Sandwich.html#v:runSandwichWithCommandLineArgs",children:"runSandwichWithCommandLineArgs"}),", you can simply pass ",(0,o.jsx)(t.code,{children:"--tui"})," and the terminal UI formatter will be selected."]}),"\n",(0,o.jsxs)(t.p,{children:["If you're using the lower-level ",(0,o.jsx)(t.a,{href:"http://hackage.haskell.org/package/sandwich0.1.0.3/docs/Test-Sandwich.html#v:runSandwich",children:"runSandwich"}),", simply include the formatter in the ",(0,o.jsx)(t.a,{href:"http://hackage.haskell.org/package/sandwich/docs/Test-Sandwich-Options.html#v:optionsFormatters",children:"optionsFormatters"})," of your sandwich options."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-haskell",children:"import Test.Sandwich.Formatters.TerminalUI\n\nmain :: IO ()\nmain = runSandwich options myTests\n  where\n    options = defaultOptions {\n      optionsFormatters = [SomeFormatter defaultTerminalUIFormatter]\n      }\n"})}),"\n",(0,o.jsx)(t.h2,{id:"about-the-ui",children:"About the UI"}),"\n",(0,o.jsx)(t.p,{children:"Most of the hotkeys are documented at the top of the UI and should be self-explanatory. The UI shows the state of the entire test tree, with each entry color-coded by its status (not started, pending, running, failed, or succeeded). You can use the arrow keys to scroll up and down through the focused nodes."}),"\n",(0,o.jsxs)(t.p,{children:["Each node of the test tree can be ",(0,o.jsx)(t.strong,{children:"opened/closed"}),' by pressing enter or tab. Opening a node shows details about what happened when it was executed. In the picture below, the "adding one" node is opened, allowing the test failure to be examined.']}),"\n",(0,o.jsxs)(t.p,{children:["Once a node is open, its contents can be ",(0,o.jsx)(t.strong,{children:"scrolled"})," up and down by pressing ",(0,o.jsx)(t.code,{children:"Control-v"}),"/",(0,o.jsx)(t.code,{children:"Meta-v"}),". This allows you to page through failure results and logs."]}),"\n",(0,o.jsxs)(t.p,{children:["Each node can also be ",(0,o.jsx)(t.strong,{children:"folded/unfolded"})," by pressing the left and right arrows. This is like folding a tree in your file manager; if a node is folded then its children will be hidden."]}),"\n",(0,o.jsxs)(t.p,{children:["The tree is pruned by ",(0,o.jsx)(t.a,{href:"../node_options#visibility-thresholds",children:"visibility threshold"}),". If you press the ",(0,o.jsx)(t.code,{children:"v"}),' button, it will cycle through different thresholds so you can show or hide the "less important" nodes.']}),"\n",(0,o.jsx)("img",{alt:"Terminal UI",src:(0,s.A)("img/tui.png")}),"\n",(0,o.jsx)(t.p,{children:"One less-obvious cool feature is that the colored bar at the bottom can be clicked. If you see a red patch and click on it, the UI will jump to the failure(s) corresponding to that point in the tree."}),"\n",(0,o.jsx)(t.h2,{id:"opening-nodes-in-your-file-explorer",children:"Opening nodes in your file explorer"}),"\n",(0,o.jsxs)(t.p,{children:["Pressing the ",(0,o.jsx)(t.code,{children:"o"})," key will open the currently focused node's ",(0,o.jsx)(t.a,{href:"../node_options#folders",children:"folder"})," in your file explorer. Pressing ",(0,o.jsx)(t.code,{children:"O"})," will open the test tree's root folder."]}),"\n",(0,o.jsx)(t.h2,{id:"jumping-to-tests-logs-and-failures-in-your-editor",children:"Jumping to tests, logs, and failures in your editor"}),"\n",(0,o.jsxs)(t.p,{children:["If you configure your editor in the ",(0,o.jsx)(t.code,{children:"EDITOR"})," environment variable, the UI can jump directly to the test, logs, or failure location corresponding to the focused node. There are a couple tricks to set this up."]}),"\n",(0,o.jsxs)(t.p,{children:["When invoking the ",(0,o.jsx)(t.code,{children:"EDITOR"})," command, the strings ",(0,o.jsx)(t.code,{children:"FILE"}),", ",(0,o.jsx)(t.code,{children:"LINE"}),", and ",(0,o.jsx)(t.code,{children:"COLUMN"})," will be replaced with the desired file, line number, and column number respectively. This helps you write custom commands to jump directly to the right location. If the ",(0,o.jsx)(t.code,{children:"EDITOR"}),' command doesn\'t contain the string "FILE", the filename will be appended to the end of the command.']}),"\n",(0,o.jsx)(t.p,{children:"Thus, you could do"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:'export EDITOR="vim +LINE"'})}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:'export EDITOR="vim +LINE FILE"'})," (same as previous)"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"export EDITOR=\"emacs -nw --eval '(progn (find-file FILE) (goto-line LINE) (forward-char (- COLUMN 1)) (recenter))'\""}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"This one recenters the view after jumping to the given location. You can put arbitrary Emacs Lisp here."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:'export EDITOR="code -g FILE:LINE:COLUMN"'})," (For VSCode)"]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsxs)(t.p,{children:["Several aspects of the UI can be configured in your test code when you introduce the formatter. For example, you can set the initial value of the ",(0,o.jsx)(t.a,{href:"http://hackage.haskell.org/package/sandwich/docs/Test-Sandwich-Formatters-TerminalUI.html#v:terminalUIVisibilityThreshold",children:"visibility threshold"})," or settings like ",(0,o.jsx)(t.a,{href:"http://hackage.haskell.org/package/sandwich-0.1.0.3/docs/Test-Sandwich-Formatters-TerminalUI.html#v:terminalUIShowRunTimes",children:"terminalUIShowRunTimes"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["You can also set a default value to use for the ",(0,o.jsx)(t.code,{children:"EDITOR"})," command if the variable is not set. If you want even more control over opening editors, you can provide a custom callback which will be used instead of the default to open them."]}),"\n",(0,o.jsx)(t.h2,{id:"custom-exception-formatters",children:"Custom exception formatters"}),"\n",(0,o.jsxs)(t.p,{children:["If your tests throw custom exceptions, you can control the way they are formatted. To do this, simply pass a list of callbacks to the ",(0,o.jsx)(t.a,{href:"http://hackage.haskell.org/package/sandwich/docs/Test-Sandwich-Formatters-TerminalUI.html#v:terminalUICustomExceptionFormatters",children:"terminalUICustomExceptionFormatters"})," argument of the Terminal UI Formatter settings. The callback can match against a ",(0,o.jsx)(t.code,{children:"SomeException"})," and optionally return a ",(0,o.jsx)(t.a,{href:"http://hackage.haskell.org/package/sandwich/docs/Test-Sandwich-Formatters-TerminalUI.html#t:CustomTUIException",children:"CustomTUIException"}),". This return type has two constructors. One allows you to boil your exception down to a simple message and callstack to display. The other is more powerful and allows you to display the exception as an arbitrary ",(0,o.jsx)(t.a,{href:"https://hackage.haskell.org/package/brick",children:"Brick"})," widget."]}),"\n",(0,o.jsxs)(t.p,{children:["Below is an example of passing a callback that matches a custom exception and displays it using blue text. You can find a full working example in the ",(0,o.jsx)(t.code,{children:"custom-exceptions"})," demo."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-haskell",metastring:'title="https://github.com/codedownio/sandwich/blob/master/demos/demo-custom-exceptions/app/Main.hs"',children:'data MyColoredException = MyColoredException Text\n  deriving Show\ninstance Exception MyColoredException\n\nformatMyColoredException :: SomeException -> Maybe CustomTUIException\nformatMyColoredException e = case fromException e of\n  Just (MyColoredException msg) -> Just $ CustomTUIExceptionBrick $ modifyDefAttr (\\x ->\n    x { attrForeColor = SetTo blue }) (str $ T.unpack msg)\n  Nothing -> Nothing\n\ncustomExceptionsDemo :: TopSpec\ncustomExceptionsDemo = describe "Custom exceptions" $ do\n  it "formats a custom exception with its own widget rendering function" $ do\n    liftIO $ throwIO $ MyColoredException "My widget message"\n\ntestOptions = defaultOptions {\n  ...\n  , optionsFormatters = [SomeFormatter $ defaultTerminalUIFormatter {\n      terminalUICustomExceptionFormatters = [formatMyColoredException]\n      }]\n  }\n'})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},6113:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var o=n(758);const i={},s=o.createContext(i);function r(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);