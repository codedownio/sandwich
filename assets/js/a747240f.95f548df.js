"use strict";(self.webpackChunksandwich_site=self.webpackChunksandwich_site||[]).push([[12],{2095:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"label":"Basics","type":"category","items":[{"type":"link","label":"Introduction","href":"/sandwich/docs/","docId":"intro","unlisted":false},{"type":"link","label":"Contexts","href":"/sandwich/docs/contexts","docId":"contexts","unlisted":false},{"type":"link","label":"Node Options","href":"/sandwich/docs/node_options","docId":"node_options","unlisted":false},{"type":"link","label":"Timing","href":"/sandwich/docs/timing","docId":"timing","unlisted":false},{"type":"link","label":"Command line","href":"/sandwich/docs/command_line","docId":"command_line","unlisted":false},{"type":"link","label":"Test Discovery","href":"/sandwich/docs/discovery","docId":"discovery","unlisted":false}],"collapsed":true,"collapsible":true},{"label":"Formatters","type":"category","items":[{"type":"link","label":"Terminal UI Formatter","href":"/sandwich/docs/formatters/tui","docId":"formatters/tui","unlisted":false},{"type":"link","label":"Print Formatter","href":"/sandwich/docs/formatters/print","docId":"formatters/print","unlisted":false},{"type":"link","label":"Failure Report Formatter","href":"/sandwich/docs/formatters/failure_report","docId":"formatters/failure_report","unlisted":false},{"type":"link","label":"Log Saver Formatter","href":"/sandwich/docs/formatters/log_saver","docId":"formatters/log_saver","unlisted":false},{"type":"link","label":"Silent Formatter","href":"/sandwich/docs/formatters/silent","docId":"formatters/silent","unlisted":false},{"type":"link","label":"Slack Formatter","href":"/sandwich/docs/formatters/slack","docId":"formatters/slack","unlisted":false},{"type":"link","label":"Markdown Summary Formatter","href":"/sandwich/docs/formatters/markdown_summary","docId":"formatters/markdown_summary","unlisted":false}],"collapsed":true,"collapsible":true},{"label":"Extensions","type":"category","items":[{"type":"link","label":"Golden testing","href":"/sandwich/docs/extensions/sandwich-golden","docId":"extensions/sandwich-golden","unlisted":false},{"type":"link","label":"Hedgehog","href":"/sandwich/docs/extensions/sandwich-hedgehog","docId":"extensions/sandwich-hedgehog","unlisted":false},{"type":"link","label":"QuickCheck","href":"/sandwich/docs/extensions/sandwich-quickcheck","docId":"extensions/sandwich-quickcheck","unlisted":false},{"type":"link","label":"WebDriver","href":"/sandwich/docs/extensions/sandwich-webdriver","docId":"extensions/sandwich-webdriver","unlisted":false}],"collapsed":true,"collapsible":true},{"label":"Context libraries","type":"category","items":[{"type":"link","label":"Base contexts","href":"/sandwich/docs/context-libraries/sandwich-contexts","docId":"context-libraries/sandwich-contexts","unlisted":false},{"type":"link","label":"PostgreSQL","href":"/sandwich/docs/context-libraries/sandwich-contexts-postgresql","docId":"context-libraries/sandwich-contexts-postgresql","unlisted":false},{"type":"link","label":"SMTP","href":"/sandwich/docs/context-libraries/sandwich-contexts-smtp","docId":"context-libraries/sandwich-contexts-smtp","unlisted":false},{"type":"link","label":"Kubernetes","href":"/sandwich/docs/context-libraries/sandwich-contexts-kubernetes","docId":"context-libraries/sandwich-contexts-kubernetes","unlisted":false},{"type":"link","label":"MinIO","href":"/sandwich/docs/context-libraries/sandwich-contexts-minio","docId":"context-libraries/sandwich-contexts-minio","unlisted":false}],"collapsed":true,"collapsible":true}]},"docs":{"command_line":{"id":"command_line","title":"Command line arguments","description":"If you use runSandwichWithCommandLineArgs, then you can control your tests with command line arguments. This section contains a quick overview of the available arguments, and explains how you can add your own custom ones.","sidebar":"docs"},"context-libraries/sandwich-contexts":{"id":"context-libraries/sandwich-contexts","title":"Base contexts","description":"The sandwich-contexts package provides several useful contexts for adding power to your tests.","sidebar":"docs"},"context-libraries/sandwich-contexts-docker":{"id":"context-libraries/sandwich-contexts-docker","title":"Docker","description":""},"context-libraries/sandwich-contexts-kubernetes":{"id":"context-libraries/sandwich-contexts-kubernetes","title":"Kubernetes","description":"The sandwich-contexts-kubernetes package provides contexts for creating and managing Kubernetes clusters in your tests, along with utilities for interacting with them.","sidebar":"docs"},"context-libraries/sandwich-contexts-minio":{"id":"context-libraries/sandwich-contexts-minio","title":"MinIO","description":"The sandwich-contexts-minio package provides contexts for introducing MinIO S3-compatible object storage servers in your tests. MinIO can be launched either as a raw binary or via a container system.","sidebar":"docs"},"context-libraries/sandwich-contexts-postgresql":{"id":"context-libraries/sandwich-contexts-postgresql","title":"PostgreSQL","description":"The Test.Sandwich.Contexts.PostgreSQL module provides tools for introducing PostgreSQL databases, either via a container (Docker or Podman) or via a raw process (typically obtaining the binary from Nix).","sidebar":"docs"},"context-libraries/sandwich-contexts-smtp":{"id":"context-libraries/sandwich-contexts-smtp","title":"SMTP","description":"The Test.Sandwich.Contexts.FakeSmtpServer module provides a simple fake SMTP server, useful for testing email systems. The server is based on a slightly tweaked version of ReachFive/fake-smtp-server.","sidebar":"docs"},"contexts":{"id":"contexts","title":"Contexts","description":"One of Sandwich\'s most powerful features is the ability to introduce contexts in tests. A context is simply a labeled dependency, which can be obtained in a test using the getContext function:","sidebar":"docs"},"discovery":{"id":"discovery","title":"Test Discovery","description":"Test discovery is the process of automatically finding test files, so you don\'t need to manually manage your imports and write out top-level test trees.","sidebar":"docs"},"extensions/sandwich-golden":{"id":"extensions/sandwich-golden","title":"Golden testing","description":"Sandwich has built-in support for golden testing. Golden testing is a form of unit testing where the desired output is stored in separate file(s), usually checked into your repo. When the tests are run, they invoke your code and compare the output to the file version. A good golden testing framework allows you to easily generate (and re-generate!) the output files.","sidebar":"docs"},"extensions/sandwich-hedgehog":{"id":"extensions/sandwich-hedgehog","title":"Hedgehog","description":"You can use sandwich-hedgehog (provided as a separate package) to easily integrate integrate Hedgehog tests into the test tree.","sidebar":"docs"},"extensions/sandwich-quickcheck":{"id":"extensions/sandwich-quickcheck","title":"QuickCheck","description":"You can use sandwich-quickcheck (provided as a separate package) to easily integrate integrate QuickCheck tests into the test tree.","sidebar":"docs"},"extensions/sandwich-webdriver":{"id":"extensions/sandwich-webdriver","title":"WebDriver","description":"Setting up WebDriver tests normally requires manual work to obtain the Selenium server JAR file or other WebDriver server plus a driver program for your browser, launch the server, and connect to the server with your client library. It can be error-prone to make sure the versions are compatible and everything runs smoothly.","sidebar":"docs"},"formatters/failure_report":{"id":"formatters/failure_report","title":"Failure Report Formatter","description":"The failure report formatter is similar to the print formatter, but it only prints failures. It\'s useful when you want less verbose output that only prints if something goes wrong. Like with the print formatter, it shows log messages, callstacks, and failure info in its messages.","sidebar":"docs"},"formatters/log_saver":{"id":"formatters/log_saver","title":"Log Saver Formatter","description":"The log saver formatter writes test logs to a given path on disk. Note that Sandwich already writes logs to disk by default, as configured by the optionsSavedLogLevel option, so this is primarily useful when you want to save logs to another location, or with a different log level, or with a different formatter from the global one.","sidebar":"docs"},"formatters/markdown_summary":{"id":"formatters/markdown_summary","title":"Markdown Summary Formatter","description":"The Markdown Summary formatter outputs a short summary of your tests results in Markdown format. It is designed to be used with Github Actions job summaries.","sidebar":"docs"},"formatters/print":{"id":"formatters/print","title":"Print Formatter","description":"The print formatter gives traditional print output, similar to other test tools. The tree is printed from top to bottom, with each node of the test tree colored based on whether it succeeded or failed. It also shows information about failures and log messages.","sidebar":"docs"},"formatters/silent":{"id":"formatters/silent","title":"Silent Formatter","description":"The silent formatter prints only the run root of the test tree. It\'s useful when you don\'t want to see live output, since you\'ll just examine the results on disk later. It can also be used while testing in CI with the Slack formatter enabled.","sidebar":"docs"},"formatters/slack":{"id":"formatters/slack","title":"Slack Formatter","description":"The Slack formatter allows you to send live test results to a Slack channel. It shows the overall progress through the tests as a progress bar, and also shows failures as they occur.","sidebar":"docs"},"formatters/tui":{"id":"formatters/tui","title":"Terminal UI Formatter","description":"The terminal UI formatter is one of the key features of Sandwich. It uses the awesome Brick library to make an interactive UI for running (or re-running! ) tests and inspecting their results.","sidebar":"docs"},"intro":{"id":"intro","title":"Welcome to Sandwich","description":"<iframe className={styles.indexCtasGitHubButton}","sidebar":"docs"},"mdx":{"id":"mdx","title":"Powered by MDX","description":"You can write JSX and use React components within your Markdown thanks to MDX."},"node_options":{"id":"node_options","title":"Node Options","description":"The basic functions like describe, it, etc. are aliases to lower-level functions called describe\', it\', etc. The lower-level versions accept node options which you can use to fine-tune how each node behaves.","sidebar":"docs"},"test_trees":{"id":"test_trees","title":"Test Trees","description":"Sandwich is built around the idea of a test tree. You write a test tree using simple monadic syntax. The simplest kinds of nodes are describe and it nodes, which are used to group and define tests. For example:"},"timing":{"id":"timing","title":"Timing","description":"Sandwich has a built-in notion of test timing. Timing can be useful when you have a large test suite and want to understand where it is spending the most time.","sidebar":"docs"}}}}')}}]);