"use strict";(self.webpackChunksandwich_site=self.webpackChunksandwich_site||[]).push([[8217],{3002:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var n=s(6070),r=s(6113);const i={id:"sandwich-contexts-smtp",title:"SMTP"},a=void 0,o={id:"context-libraries/sandwich-contexts-smtp",title:"SMTP",description:"The Test.Sandwich.Contexts.FakeSmtpServer module provides a simple fake SMTP server, useful for testing email systems. The server is based on a slightly tweaked version of ReachFive/fake-smtp-server.",source:"@site/docs/context-libraries/sandwich-contexts-smtp.md",sourceDirName:"context-libraries",slug:"/context-libraries/sandwich-contexts-smtp",permalink:"/sandwich/docs/context-libraries/sandwich-contexts-smtp",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/context-libraries/sandwich-contexts-smtp.md",tags:[],version:"current",frontMatter:{id:"sandwich-contexts-smtp",title:"SMTP"},sidebar:"docs",previous:{title:"PostgreSQL",permalink:"/sandwich/docs/context-libraries/sandwich-contexts-postgresql"},next:{title:"Kubernetes",permalink:"/sandwich/docs/context-libraries/sandwich-contexts-kubernetes"}},c={},l=[{value:"Example",id:"example",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.a,{href:"https://hackage.haskell.org/package/sandwich-contexts/docs/Test-Sandwich-Contexts-FakeSmtpServer.html",children:"Test.Sandwich.Contexts.FakeSmtpServer"})," module provides a simple fake SMTP server, useful for testing email systems. The server is based on a slightly tweaked version of ",(0,n.jsx)(t.a,{href:"https://github.com/ReachFive/fake-smtp-server",children:"ReachFive/fake-smtp-server"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["This module is currently included in ",(0,n.jsx)(t.a,{href:"./sandwich-contexts",children:"sandwich-contexts"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,n.jsxs)(t.p,{children:["Here's an example of introducing and using the server. The ",(0,n.jsx)(t.code,{children:"sendSampleEmail"})," function here uses ",(0,n.jsx)(t.a,{href:"https://hackage.haskell.org/package/HaskellNet/docs/Network-HaskellNet-SMTP.html",children:"Network.HaskellNet.SMTP"})," to send an email. Then, it waits for the email to appear by polling ",(0,n.jsx)(t.code,{children:"fakeSmtpServerGetEmails"}),". We could test various properties of the email here if necessary."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-haskell",metastring:'title="https://github.com/codedownio/sandwich/blob/master/demos/demo-fake-smtp-server/app/Main.hs"',children:'spec :: TopSpec\nspec = describe "Introducing a fake SMTP server" $\n  introduceNixContext nixpkgsReleaseDefault $ introduceFakeSmtpServerNix defaultFakeSmtpServerOptions $ do\n    it "sends an email and verifies it was received" $ do\n      FakeSmtpServer {..} <- getContext fakeSmtpServer\n      info [i|Got fake SMTP server on port: #{fakeSmtpServerSmtpPort}|]\n\n      sendSampleEmail fakeSmtpServerHostname fakeSmtpServerSmtpPort\n      waitUntil 60 $ do\n        fakeSmtpServerGetEmails >>= \\case\n          [x] -> debug [i|Got email: #{x}|]\n          xs -> expectationFailure [i|Unexpected emails result: #{xs}|]\n'})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},6113:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>o});var n=s(758);const r={},i=n.createContext(r);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);