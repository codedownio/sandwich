"use strict";(self.webpackChunksandwich_site=self.webpackChunksandwich_site||[]).push([[976],{9181:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>h,contentTitle:()=>d,default:()=>x,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var n=t(6070),i=t(6113),a=t(4125),r=t(6333);const c={heroBanner:"heroBanner_UJJx",carouselContainer:"carouselContainer__clt",buttons:"buttons_pzbO",features:"features_keug",featureImage:"featureImage_yA8i",carouselHeading:"carouselHeading_r88r",section:"section_rC2D",sectionLink:"sectionLink_eSu8",container:"container_czXe",heading:"heading_AAq7",code:"code_lDuv",codeInline:"codeInline_sfwi",backticks:"backticks_aK16",indexCtasGitHubButtonWrapper:"indexCtasGitHubButtonWrapper_AOht",indexCtasGitHubButton:"indexCtasGitHubButton_sMIS"},o={id:"intro",title:"Welcome to Sandwich",sidebar_label:"Introduction",slug:"/"},d=void 0,l={id:"intro",title:"Welcome to Sandwich",description:"<iframe className={styles.indexCtasGitHubButton}",source:"@site/docs/intro.md",sourceDirName:".",slug:"/",permalink:"/sandwich/docs/",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/intro.md",tags:[],version:"current",frontMatter:{id:"intro",title:"Welcome to Sandwich",sidebar_label:"Introduction",slug:"/"},sidebar:"docs",next:{title:"Contexts",permalink:"/sandwich/docs/contexts"}},h={},u=[{value:"Basic tests",id:"basic-tests",level:2},{value:"Expectations",id:"expectations",level:2},{value:"TUI interface",id:"tui-interface",level:2},{value:"On-disk results",id:"on-disk-results",level:2}];function m(e){const s={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("div",{className:c.buttons,children:(0,n.jsx)("span",{className:c.indexCtasGitHubButtonWrapper,children:(0,n.jsx)("iframe",{className:c.indexCtasGitHubButton,src:"https://ghbtns.com/github-btn.html?user=codedownio&repo=sandwich&type=star&count=true&size=large",width:160,height:30,title:"GitHub Stars"})})}),"\n",(0,n.jsxs)(s.p,{children:["Sandwich is a test framework for Haskell, inspired by and (almost) a drop-in replacement for ",(0,n.jsx)(s.a,{href:"http://hspec.github.io/",children:"Hspec"}),". It has a number of powerful features and integrations, such as:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Interactive terminal UI interface for viewing test progress and results."}),"\n",(0,n.jsxs)(s.li,{children:["Built-in ",(0,n.jsx)(s.a,{href:"/docs/timing",children:"profiling"})," support."]}),"\n",(0,n.jsxs)(s.li,{children:["Integrations such as ",(0,n.jsx)(s.a,{href:"/docs/extensions/sandwich-hedgehog",children:"Hedgehog"}),", ",(0,n.jsx)(s.a,{href:"/docs/extensions/sandwich-quickcheck",children:"QuickCheck"}),", and ",(0,n.jsx)(s.a,{href:"/docs/extensions/sandwich-webdriver",children:"Selenium"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:["Context libraries that allow you to introduce things like ",(0,n.jsx)(s.a,{href:"/docs/context-libraries/sandwich-contexts#postgresql-contexts",children:"databases"}),", ",(0,n.jsx)(s.a,{href:"#TODO",children:"Docker containers"}),", or even full ",(0,n.jsx)(s.a,{href:"/docs/context-libraries/sandwich-contexts-kubernetes",children:"Kubernetes clusters"}),"."]}),"\n"]}),"\n",(0,n.jsx)("div",{className:c.carouselContainer,children:(0,n.jsxs)(r.FN,{showThumbs:!1,dynamicHeight:!0,statusFormatter:(e,s)=>`${e} of ${s}`,children:[(0,n.jsxs)("div",{children:[(0,n.jsx)("div",{className:c.carouselHeading,children:"Terminal UI interface"}),(0,n.jsx)("img",{src:(0,a.A)("/img/basic.gif"),style:{paddingBottom:"2.05em"}})]}),(0,n.jsxs)("div",{children:[(0,n.jsx)("div",{className:c.carouselHeading,children:"Jump to failure in editor"}),(0,n.jsx)("img",{src:(0,a.A)("/img/jump_to_error.gif"),style:{paddingBottom:"2.05em"}})]}),(0,n.jsxs)("div",{children:[(0,n.jsx)("div",{className:c.carouselHeading,children:"Slack integration"}),(0,n.jsx)("img",{src:(0,a.A)("/img/slack.gif")})]}),(0,n.jsxs)("div",{children:[(0,n.jsx)("div",{className:c.carouselHeading,children:"Timing and flamegraphs"}),(0,n.jsx)("img",{src:(0,a.A)("/img/timing_landing.gif")})]})]})}),"\n",(0,n.jsx)(s.h2,{id:"basic-tests",children:"Basic tests"}),"\n",(0,n.jsxs)(s.p,{children:["Let's start with a basic test suite and add more features as we go along. As with other test frameworks, tests are structured as a ",(0,n.jsx)(s.strong,{children:"tree"}),", defined using a simple free monad with nodes like ",(0,n.jsx)(s.code,{children:"describe"})," and ",(0,n.jsx)(s.code,{children:"it"}),". There are a total of 8 such basic nodes and we'll see others as we go along."]}),"\n",(0,n.jsxs)(s.p,{children:['The meat of the tests occurs in "it" nodes at the leaves of the tree. Every test runs in a special monad called ',(0,n.jsx)(s.code,{children:"ExampleT"}),", which is essentially a ",(0,n.jsx)(s.code,{children:"ReaderT context LoggingT"}),". The ",(0,n.jsx)(s.code,{children:"LoggingT"})," part gives tests the ability to log information, and the ",(0,n.jsx)(s.code,{children:"ReaderT"})," gives tests access to ",(0,n.jsx)(s.em,{children:"context"}),". More on this later. The monad also implements some other useful classes like ",(0,n.jsx)(s.code,{children:"MonadIO"}),", so you can run arbitrary IO actions."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-haskell",metastring:'title="https://github.com/codedownio/sandwich/blob/master/demos/demo-basic/app/Main.hs"',children:'module Main where\n\nimport Test.Sandwich\n\nbasic :: TopSpec\nbasic = do\n  describe "Arithmetic" $ do\n    it "adds" $ do\n      (2 + 2) `shouldBe` 4\n      (2 + 3) `shouldBe` 5\n\n    it "subtracts" $ do\n      (3 - 2) `shouldBe` 0\n      warn "This test might not be right..."\n\n  describe "Strings" $\n    it "concatenates" $\n      ("abc" <> "def") `shouldBe` "abcdef"\n\nmain :: IO ()\nmain = runSandwichWithCommandLineArgs defaultOptions basic\n'})}),"\n",(0,n.jsx)(s.h2,{id:"expectations",children:"Expectations"}),"\n",(0,n.jsxs)(s.p,{children:["The tests above assert things using expectation functions like ",(0,n.jsx)(s.code,{children:"shouldBe"}),". There are a variety of these in ",(0,n.jsx)(s.a,{href:"http://hackage.haskell.org/package/sandwich/docs/Test-Sandwich-Expectations.html",children:"Test.Sandwich.Expectations"})," such as ",(0,n.jsx)(s.code,{children:"shouldNotBe"}),", ",(0,n.jsx)(s.code,{children:"shouldContain"}),", etc., and they are similar to other test frameworks."]}),"\n",(0,n.jsxs)(s.p,{children:["These functions simply throw an exception of type ",(0,n.jsx)(s.a,{href:"http://hackage.haskell.org/package/sandwich/docs/Test-Sandwich-Misc.html#t:FailureReason",children:"FailureReason"})," which the Sandwich machinery catches and displays. Don't worry, you can throw other exceptions too. You can even write instances for your ",(0,n.jsx)(s.a,{href:"formatters/tui#custom-exception-formatters",children:"custom exception types"})," so that they display nicely in Sandwich ",(0,n.jsx)(s.a,{href:"formatters/tui",children:"formatters"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["To fail a test with a string message, just call ",(0,n.jsx)(s.a,{href:"http://hackage.haskell.org/package/sandwich/docs/Test-Sandwich-Expectations.html#v:expectationFailure",children:"expectationFailure"}),'. You can also mark a test as "pending" by calling the ',(0,n.jsx)(s.a,{href:"http://hackage.haskell.org/package/sandwich/docs/Test-Sandwich-Expectations.html#v:pending",children:"pending"})," function anywhere in the test, or by changing ",(0,n.jsx)(s.code,{children:"it"})," to ",(0,n.jsx)(s.code,{children:"xit"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"tui-interface",children:"TUI interface"}),"\n",(0,n.jsxs)(s.p,{children:["Let's run this test from the command line, using the ",(0,n.jsx)(s.a,{href:"/docs/formatters/tui",children:"Terminal UI interface"}),". This will allow us to move around and examine the tests. In particular, we can examine the failure and log message in the subtraction tests."]}),"\n",(0,n.jsxs)(s.p,{children:["Since we used ",(0,n.jsx)(s.a,{href:"http://hackage.haskell.org/package/sandwich/docs/Test-Sandwich.html#v:runSandwichWithCommandLineArgs",children:"runSandwichWithCommandLineArgs"}),", we can pass flags to control the formatter:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"~/sandwich> stack run demo-basic -- --tui\n"})}),"\n",(0,n.jsxs)("video",{width:"100%",controls:!0,autoplay:"true",muted:"true",children:[(0,n.jsx)("source",{src:(0,a.A)("img/basic_tui.webm"),type:"video/webm"}),(0,n.jsx)(s.p,{children:"Your browser does not support the video tag."})]}),"\n",(0,n.jsx)(s.h2,{id:"on-disk-results",children:"On-disk results"}),"\n",(0,n.jsxs)(s.p,{children:["Unless configured otherwise, each test tree run produces a ",(0,n.jsx)(s.em,{children:"directory tree"})," which exactly mirrors the test tree structure. For example, the test tree above would produce a tree like the following."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"<test_root>\n\u251c\u2500 results\n\u2502  \u251c\u2500 Arithmetic\n\u2502  \u2502  \u251c\u2500 adds\n\u2502  \u2502  \u2514\u2500 subtracts\n\u2502  \u2502     \u2514\u2500 test_logs.txt # contains the log warning message\n\u2502  \u2514\u2500 Strings\n\u2502     \u2514\u2500 concatenates\n\u2514\u2500 errors\n   \u2514\u2500 subtracts --\x3e ../results/Arithmetic/subtracts # failure symlink\n"})}),"\n",(0,n.jsx)(s.p,{children:"Thus, every test tree node has a place where it can stash logs, screenshots, or other artifacts. This structure makes it easy to browse through your tests and check results."}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"errors"})," folder at the root provides a handy list of symlinks to all failures."]}),"\n",(0,n.jsxs)(s.blockquote,{children:["\n",(0,n.jsx)(s.p,{children:"Check out the next sections to learn about contexts, hooks, and more!"}),"\n"]})]})}function x(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}}}]);