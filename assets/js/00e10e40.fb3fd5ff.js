"use strict";(self.webpackChunksandwich_site=self.webpackChunksandwich_site||[]).push([[1144],{1863:(e,c,s)=>{s.r(c),s.d(c,{assets:()=>r,contentTitle:()=>a,default:()=>k,frontMatter:()=>t,metadata:()=>h,toc:()=>o});var i=s(6070),n=s(6113);const t={id:"sandwich-quickcheck",title:"QuickCheck"},a=void 0,h={id:"extensions/sandwich-quickcheck",title:"QuickCheck",description:"You can use sandwich-quickcheck (provided as a separate package) to easily integrate integrate QuickCheck tests into the test tree.",source:"@site/docs/extensions/sandwich-quickcheck.md",sourceDirName:"extensions",slug:"/extensions/sandwich-quickcheck",permalink:"/sandwich/docs/extensions/sandwich-quickcheck",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/extensions/sandwich-quickcheck.md",tags:[],version:"current",frontMatter:{id:"sandwich-quickcheck",title:"QuickCheck"},sidebar:"docs",previous:{title:"Hedgehog",permalink:"/sandwich/docs/extensions/sandwich-hedgehog"},next:{title:"Selenium",permalink:"/sandwich/docs/extensions/sandwich-webdriver"}},r={},o=[{value:"Usage",id:"usage",level:2},{value:"Modifying the args",id:"modifying-the-args",level:2},{value:"Controlling QuickCheck parameters with command line args",id:"controlling-quickcheck-parameters-with-command-line-args",level:2}];function d(e){const c={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(c.p,{children:["You can use ",(0,i.jsx)(c.code,{children:"sandwich-quickcheck"})," (provided as a separate package) to easily integrate integrate ",(0,i.jsx)(c.a,{href:"http://www.cse.chalmers.se/~rjmh/QuickCheck/manual.html",children:"QuickCheck"})," tests into the test tree."]}),"\n",(0,i.jsxs)(c.p,{children:["Haddocks can be found ",(0,i.jsx)(c.a,{href:"http://hackage.haskell.org/package/sandwich-quickcheck/docs/Test-Sandwich-QuickCheck.html",children:"here"}),"."]}),"\n",(0,i.jsx)(c.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(c.p,{children:["To use ",(0,i.jsx)(c.code,{children:"sandwich-quickcheck"}),", just add the package to your project. Then, introduce a QuickCheck argument context using ",(0,i.jsx)(c.a,{href:"http://hackage.haskell.org/package/sandwich-quickcheck/docs/Test-Sandwich-QuickCheck.html#v:introduceQuickCheck",children:"introduceQuickCheck"}),". Now you can start writing props as test nodes using the ",(0,i.jsx)(c.a,{href:"http://hackage.haskell.org/package/sandwich-quickcheck/docs/Test-Sandwich-QuickCheck.html#v:prop",children:"prop"})," function. For example:"]}),"\n",(0,i.jsx)(c.pre,{children:(0,i.jsx)(c.code,{className:"language-haskell",metastring:'title="https://github.com/codedownio/sandwich/blob/master/demos/demo-quickcheck/app/Main.hs"',children:'quickCheckDemo :: TopSpec\nquickCheckDemo = describe "QuickCheck tests" $ introduceQuickCheck $ do\n  prop "List reversal" $ \\(xs :: [Int]) -> reverse (reverse xs) == xs\n  prop "Failing list reversal" $ \\(xs :: [Int]) -> (reverse xs) == xs\n'})}),"\n",(0,i.jsx)(c.h2,{id:"modifying-the-args",children:"Modifying the args"}),"\n",(0,i.jsxs)(c.p,{children:["If you use ",(0,i.jsx)(c.a,{href:"http://hackage.haskell.org/package/sandwich-quickcheck/docs/Test-Sandwich-QuickCheck.html#v:introduceQuickCheck'",children:"introduceQuickCheck'"}),", you can pass your own value for the QuickCheck ",(0,i.jsx)(c.a,{href:"https://hackage.haskell.org/package/QuickCheck/docs/Test-QuickCheck.html#t:Args",children:"Args"}),". The default version uses ",(0,i.jsx)(c.a,{href:"https://hackage.haskell.org/package/QuickCheck/docs/Test-QuickCheck.html#v:stdArgs",children:"stdArgs"}),"."]}),"\n",(0,i.jsxs)(c.p,{children:["If you want to modify the already-introduced arguments in a test tree, we provide the ",(0,i.jsx)(c.a,{href:"http://hackage.haskell.org/package/sandwich-quickcheck/docs/Test-Sandwich-QuickCheck.html#v:modifyArgs",children:"modifyArgs"})," function, as well as helpers like ",(0,i.jsx)(c.code,{children:"modifyMaxSize"}),", ",(0,i.jsx)(c.code,{children:"modifyMaxDiscardRatio"}),", etc. These are modelled directly after HSpec's ",(0,i.jsx)(c.a,{href:"https://hackage.haskell.org/package/hspec/docs/Test-Hspec-QuickCheck.html",children:"Test.Hspec.QuickCheck"}),"."]}),"\n",(0,i.jsx)(c.h2,{id:"controlling-quickcheck-parameters-with-command-line-args",children:"Controlling QuickCheck parameters with command line args"}),"\n",(0,i.jsxs)(c.p,{children:["Some QuickCheck parameters can be controlled via the command line. To see the valid options, run Sandwich with ",(0,i.jsx)(c.code,{children:"--print-quickcheck-flags"}),"."]}),"\n",(0,i.jsx)(c.pre,{children:(0,i.jsx)(c.code,{className:"language-shell",children:"Usage: demo [--quickcheck-seed INT]\n            [--quickcheck-max-discard-ratio INT]\n            [--quickcheck-max-size INT] [--quickcheck-max-success INT]\n            [--quickcheck-max-shrinks INT]\n\nAvailable options:\n  --quickcheck-seed INT    QuickCheck seed\n  --quickcheck-max-discard-ratio INT\n                           Maximum number of discarded tests per successful test\n                           before giving up\n  --quickcheck-max-size INT\n                           Size to use for the biggest test cases\n  --quickcheck-max-success INT\n                           Maximum number of successful tests before succeeding\n  --quickcheck-max-shrinks INT\n                           Maximum number of shrinks before giving up\n"})})]})}function k(e={}){const{wrapper:c}={...(0,n.R)(),...e.components};return c?(0,i.jsx)(c,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},6113:(e,c,s)=>{s.d(c,{R:()=>a,x:()=>h});var i=s(758);const n={},t=i.createContext(n);function a(e){const c=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(c):{...c,...e}}),[c,e])}function h(e){let c;return c=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),i.createElement(t.Provider,{value:c},e.children)}}}]);