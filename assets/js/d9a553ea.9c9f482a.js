"use strict";(self.webpackChunksandwich_site=self.webpackChunksandwich_site||[]).push([[2442],{2012:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=t(6070),s=t(6113);const o={id:"sandwich-contexts-minio",title:"MinIO"},r=void 0,a={id:"context-libraries/sandwich-contexts-minio",title:"MinIO",description:"The sandwich-contexts-minio package provides contexts for introducing MinIO S3-compatible object storage servers in your tests. MinIO can be launched either as a raw binary or via a container system.",source:"@site/docs/context-libraries/sandwich-contexts-minio.md",sourceDirName:"context-libraries",slug:"/context-libraries/sandwich-contexts-minio",permalink:"/sandwich/docs/context-libraries/sandwich-contexts-minio",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/context-libraries/sandwich-contexts-minio.md",tags:[],version:"current",frontMatter:{id:"sandwich-contexts-minio",title:"MinIO"},sidebar:"docs",previous:{title:"Kubernetes",permalink:"/sandwich/docs/context-libraries/sandwich-contexts-kubernetes"}},c={},l=[{value:"Starting MinIO servers",id:"starting-minio-servers",level:2},{value:"Via Nix-provided binary",id:"via-nix-provided-binary",level:3},{value:"Via container",id:"via-container",level:3},{value:"Via existing binary",id:"via-existing-binary",level:3},{value:"Configuration options",id:"configuration-options",level:2},{value:"Working with the TestS3Server",id:"working-with-the-tests3server",level:2},{value:"Default credentials",id:"default-credentials",level:3},{value:"Integration examples",id:"integration-examples",level:2},{value:"Working with buckets and objects",id:"working-with-buckets-and-objects",level:3},{value:"Using with HTTP clients",id:"using-with-http-clients",level:3},{value:"Container mode specifics",id:"container-mode-specifics",level:2},{value:"Container options",id:"container-options",level:3},{value:"Port mapping",id:"port-mapping",level:3},{value:"Bracket-style functions",id:"bracket-style-functions",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://hackage.haskell.org/package/sandwich-contexts-minio",children:"sandwich-contexts-minio"})," package provides contexts for introducing ",(0,i.jsx)(n.a,{href:"https://min.io/",children:"MinIO"})," S3-compatible object storage servers in your tests. MinIO can be launched either as a raw binary or via a container system."]}),"\n",(0,i.jsxs)(n.p,{children:["The MinIO server is introduced as a generic ",(0,i.jsx)(n.a,{href:"https://hackage-content.haskell.org/package/sandwich-contexts-minio/docs/Test-Sandwich-Contexts-MinIO.html#t:TestS3Server",children:"TestS3Server"}),", which gives you the flexibility to easily swap out different S3-compatible storage systems in your tests."]}),"\n",(0,i.jsx)(n.h2,{id:"starting-minio-servers",children:"Starting MinIO servers"}),"\n",(0,i.jsx)(n.h3,{id:"via-nix-provided-binary",children:"Via Nix-provided binary"}),"\n",(0,i.jsx)(n.p,{children:"The simplest approach uses Nix to obtain the MinIO binary automatically:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-haskell",metastring:'title="https://github.com/codedownio/sandwich/blob/master/demos/demo-minio/app/Main.hs"',children:'spec :: TopSpec\nspec = describe "Introducing MinIO" $\n  introduceNixContext nixpkgsReleaseDefault $\n    introduceMinIOViaNix defaultMinIOContextOptions $ do\n      it "prints the MinIO server info" $ do\n        server <- getContext testS3Server\n        info [i|Got S3 server: #{server}|]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"via-container",children:"Via container"}),"\n",(0,i.jsx)(n.p,{children:"You can also run MinIO in a container using Docker or Podman:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-haskell",metastring:'title="https://github.com/codedownio/sandwich/blob/master/demos/demo-minio/app/Main.hs"',children:'spec :: TopSpec\nspec = describe "Introducing MinIO" $\n  introduceMinIOViaContainer defaultMinIOContextOptions defaultContainerOptions $ do\n    it "prints the MinIO server info" $ do\n      server <- getContext testS3Server\n      info [i|Got S3 server: #{server}|]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"via-existing-binary",children:"Via existing binary"}),"\n",(0,i.jsx)(n.p,{children:"If you already have a MinIO binary available in your environment:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-haskell",children:'spec :: TopSpec\nspec = describe "MinIO with existing binary" $\n  introduceBinaryViaEnvironment @"minio" $\n    introduceMinIOViaBinary defaultMinIOContextOptions $ do\n      it "uses the MinIO server" $ do\n        server <- getContext testS3Server\n        info [i|Got S3 server: #{server}|]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"configuration-options",children:"Configuration options"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://hackage-content.haskell.org/package/sandwich-contexts-minio/docs/Test-Sandwich-Contexts-MinIO.html#t:MinIOContextOptions",children:"MinIOContextOptions"})," type allows you to customize the MinIO server setup:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-haskell",children:"data MinIOContextOptions = MinIOContextOptions {\n  minioContextBucket :: Maybe Text        -- Default bucket to create\n  , minioContextLabels :: Map Text Text   -- Container labels (for container mode)\n  , minioContextStartupTimeout :: Int     -- Startup timeout in microseconds\n  }\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Default options:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Bucket"}),": ",(0,i.jsx)(n.code,{children:'"bucket1"'})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Labels"}),": ",(0,i.jsx)(n.code,{children:"mempty"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Startup timeout"}),": 60 seconds"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"working-with-the-tests3server",children:"Working with the TestS3Server"}),"\n",(0,i.jsxs)(n.p,{children:["Once you have a MinIO server running, you can access its configuration through the ",(0,i.jsx)(n.code,{children:"TestS3Server"})," context:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-haskell",children:'it "connects to MinIO server" $ do\n  server <- getContext testS3Server\n\n  -- Access server details\n  info [i|MinIO endpoint: #{testS3ServerEndpoint server}|]\n  info [i|Access key: #{testS3ServerAccessKeyId server}|]\n  info [i|Secret key: #{testS3ServerSecretAccessKey server}|]\n  info [i|Bucket: #{testS3ServerBucket server}|]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"default-credentials",children:"Default credentials"}),"\n",(0,i.jsx)(n.p,{children:"MinIO servers started by this library use the default MinIO credentials:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Access Key ID"}),": ",(0,i.jsx)(n.code,{children:"minioadmin"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Secret Access Key"}),": ",(0,i.jsx)(n.code,{children:"minioadmin"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"integration-examples",children:"Integration examples"}),"\n",(0,i.jsx)(n.h3,{id:"working-with-buckets-and-objects",children:"Working with buckets and objects"}),"\n",(0,i.jsxs)(n.p,{children:["We provide support for generating a ",(0,i.jsx)(n.a,{href:"https://hackage.haskell.org/package/minio-hs/docs/Network-Minio.html#t:ConnectInfo",children:"ConnectInfo"})," for use with the ",(0,i.jsx)(n.a,{href:"https://hackage.haskell.org/package/minio-hs",children:"minio-hs"})," package."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-haskell",children:'import Network.Minio\n\nit "performs S3 operations" $ do\n  server <- getContext testS3Server\n  let connectInfo = testS3ServerConnectInfo server\n\n  liftIO $ runMinio connectInfo $ do\n    -- List buckets\n    buckets <- listBuckets\n    info [i|Available buckets: #{buckets}|]\n\n    -- Upload an object (if bucket exists)\n    whenJust (testS3ServerBucket server) $ \\bucket -> do\n      let objectName = "test-file.txt"\n      let content = "Hello, MinIO!"\n\n      putObject bucket objectName content [] []\n      info [i|Uploaded object #{objectName} to bucket #{bucket}|]\n\n      -- Download the object back\n      result <- getObject bucket objectName\n      downloadedContent <- loadBytes result\n      info [i|Downloaded content: #{downloadedContent}|]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"using-with-http-clients",children:"Using with HTTP clients"}),"\n",(0,i.jsx)(n.p,{children:"Since MinIO provides an HTTP API, you can also interact with it using standard HTTP libraries:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-haskell",children:'import Network.HTTP.Simple\n\nit "makes HTTP requests to MinIO" $ do\n  server <- getContext testS3Server\n  let endpoint = testS3ServerEndpoint server\n\n  -- Make a request to the health endpoint\n  request <- parseRequest $ toString $ endpoint <> "/minio/health/live"\n  response <- httpLBS request\n\n  getResponseStatusCode response `shouldBe` 200\n  info [i|MinIO health check passed|]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"container-mode-specifics",children:"Container mode specifics"}),"\n",(0,i.jsx)(n.p,{children:"When using container mode, additional considerations apply:"}),"\n",(0,i.jsx)(n.h3,{id:"container-options",children:"Container options"}),"\n",(0,i.jsxs)(n.p,{children:["You can customize container behavior using ",(0,i.jsx)(n.a,{href:"https://hackage-content.haskell.org/package/sandwich-contexts-minio/docs/Test-Sandwich-Contexts-MinIO.html#t:ContainerOptions",children:"ContainerOptions"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-haskell",children:'customContainerOptions :: ContainerOptions\ncustomContainerOptions = defaultContainerOptions {\n  containerOptionsSystem = ContainerSystemDocker\n  , containerOptionsName = Just "my-minio-server"\n}\n\nspec :: TopSpec\nspec = introduceMinIOViaContainer defaultMinIOContextOptions customContainerOptions $ do\n  -- Your tests here\n'})}),"\n",(0,i.jsx)(n.h3,{id:"port-mapping",children:"Port mapping"}),"\n",(0,i.jsxs)(n.p,{children:["The library automatically handles port mapping, finding an available local port and mapping it to MinIO's internal port (9000). The ",(0,i.jsx)(n.a,{href:"https://hackage-content.haskell.org/package/sandwich-contexts-minio/docs/Test-Sandwich-Contexts-MinIO.html#v:testS3ServerEndpoint",children:"testS3ServerEndpoint"})," function will give you the correct local address to connect to."]}),"\n",(0,i.jsx)(n.h2,{id:"bracket-style-functions",children:"Bracket-style functions"}),"\n",(0,i.jsx)(n.p,{children:"For more control over server lifecycle, you can use the bracket-style functions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-haskell",children:'import Control.Monad.IO.Unlift\n\nit "uses bracket-style MinIO" $ do\n  withMinIOViaBinary "/path/to/minio" defaultMinIOContextOptions $ \\server -> do\n    -- Server is running here\n    let endpoint = testS3ServerEndpoint server\n    info [i|Server available at: #{endpoint}|]\n'})}),"\n",(0,i.jsx)(n.p,{children:"These functions are useful when you need to start multiple MinIO servers or when integrating with other resource management patterns."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},6113:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(758);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);