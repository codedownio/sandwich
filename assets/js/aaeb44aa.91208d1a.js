"use strict";(self.webpackChunksandwich_site=self.webpackChunksandwich_site||[]).push([[4670],{7605:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>a});var n=t(6070),r=t(6113);const i={id:"test_trees",title:"Test Trees",sidebar_label:"Test Trees"},d=void 0,o={id:"test_trees",title:"Test Trees",description:"Sandwich is built around the idea of a test tree. You write a test tree using simple monadic syntax. The simplest kinds of nodes are describe and it nodes, which are used to group and define tests. For example:",source:"@site/docs/test_trees.md",sourceDirName:".",slug:"/test_trees",permalink:"/sandwich/docs/test_trees",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/test_trees.md",tags:[],version:"current",frontMatter:{id:"test_trees",title:"Test Trees",sidebar_label:"Test Trees"}},c={},a=[];function l(e){const s={code:"code",em:"em",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.p,{children:["Sandwich is built around the idea of a ",(0,n.jsx)(s.em,{children:"test tree"}),". You write a test tree using simple monadic syntax. The simplest kinds of nodes are ",(0,n.jsx)(s.code,{children:"describe"})," and ",(0,n.jsx)(s.code,{children:"it"})," nodes, which are used to group and define tests. For example:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-haskell",children:'tests = describe "arithmetic" $ do\n  it "adds" $ do\n    (2 + 2) `shouldBe` 4\n\n  it "subtracts" $ do\n    warn "Having some trouble getting this test to pass..."\n    (2 - 2) `shouldBe` 1\n'})}),"\n",(0,n.jsx)(s.p,{children:"However, several other node types also exist:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"parallel"})," node: runs all of its child nodes in parallel."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"before"}),"/",(0,n.jsx)(s.code,{children:"beforeEach"})," runs an action before its child nodes."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"after"}),"/",(0,n.jsx)(s.code,{children:"afterEach"})," runs an action after its child nodes."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"around"}),"/",(0,n.jsx)(s.code,{children:"aroundEach"})," wrap the child nodes with a callback."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"introduce"}),"/",(0,n.jsx)(s.code,{children:"introduceWith"})," supply a ",(0,n.jsx)(s.em,{children:"context"})," to its child nodes."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},6113:(e,s,t)=>{t.d(s,{R:()=>d,x:()=>o});var n=t(758);const r={},i=n.createContext(r);function d(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);